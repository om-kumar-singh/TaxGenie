import React from 'react';
import { Download } from 'lucide-react';
import { TaxComparison, FinancialData } from '../types/tax';
import jsPDF from 'jspdf';

interface Props {
  comparison: TaxComparison;
  financialData: FinancialData;
}

export default function ExportPDF({ comparison, financialData }: Props) {
  const generatePDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    let yPos = 20;

    doc.setFontSize(22);
    doc.setTextColor(147, 51, 234);
    doc.text('TaxGenie - Tax Summary Report', pageWidth / 2, yPos, { align: 'center' });

    yPos += 15;
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on: ${new Date().toLocaleDateString('en-IN')}`, pageWidth / 2, yPos, { align: 'center' });

    yPos += 15;
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Financial Details', 15, yPos);

    yPos += 10;
    doc.setFontSize(10);
    doc.text(`Annual Income: Rs. ${financialData.income.toLocaleString('en-IN')}`, 20, yPos);
    yPos += 7;
    doc.text(`Section 80C Investment: Rs. ${financialData.section80C.toLocaleString('en-IN')}`, 20, yPos);
    yPos += 7;
    doc.text(`Section 80D (Health Insurance): Rs. ${financialData.section80D.toLocaleString('en-IN')}`, 20, yPos);
    yPos += 7;
    doc.text(`NPS (80CCD1B): Rs. ${financialData.nps.toLocaleString('en-IN')}`, 20, yPos);
    yPos += 7;
    doc.text(`HRA Received: Rs. ${financialData.hra.toLocaleString('en-IN')}`, 20, yPos);

    yPos += 15;
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text('Tax Comparison', 15, yPos);

    yPos += 10;
    doc.setFontSize(12);
    doc.setTextColor(147, 51, 234);
    doc.text('Old Tax Regime', 20, yPos);
    yPos += 7;
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    doc.text(`Gross Income: Rs. ${comparison.oldRegime.grossIncome.toLocaleString('en-IN')}`, 25, yPos);
    yPos += 6;
    doc.text(`Total Deductions: Rs. ${comparison.oldRegime.deductions.toLocaleString('en-IN')}`, 25, yPos);
    yPos += 6;
    doc.text(`Taxable Income: Rs. ${comparison.oldRegime.taxableIncome.toLocaleString('en-IN')}`, 25, yPos);
    yPos += 6;
    doc.setTextColor(220, 38, 38);
    doc.text(`Total Tax Payable: Rs. ${comparison.oldRegime.totalTax.toLocaleString('en-IN')}`, 25, yPos);
    yPos += 6;
    doc.setTextColor(0, 0, 0);
    doc.text(`Effective Rate: ${comparison.oldRegime.effectiveRate.toFixed(2)}%`, 25, yPos);

    yPos += 12;
    doc.setFontSize(12);
    doc.setTextColor(59, 130, 246);
    doc.text('New Tax Regime', 20, yPos);
    yPos += 7;
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    doc.text(`Gross Income: Rs. ${comparison.newRegime.grossIncome.toLocaleString('en-IN')}`, 25, yPos);
    yPos += 6;
    doc.text(`Standard Deduction: Rs. ${comparison.newRegime.deductions.toLocaleString('en-IN')}`, 25, yPos);
    yPos += 6;
    doc.text(`Taxable Income: Rs. ${comparison.newRegime.taxableIncome.toLocaleString('en-IN')}`, 25, yPos);
    yPos += 6;
    doc.setTextColor(220, 38, 38);
    doc.text(`Total Tax Payable: Rs. ${comparison.newRegime.totalTax.toLocaleString('en-IN')}`, 25, yPos);
    yPos += 6;
    doc.setTextColor(0, 0, 0);
    doc.text(`Effective Rate: ${comparison.newRegime.effectiveRate.toFixed(2)}%`, 25, yPos);

    yPos += 15;
    doc.setFillColor(16, 185, 129);
    doc.rect(15, yPos - 5, pageWidth - 30, 15, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(12);
    doc.text(`Recommended: ${comparison.recommendedRegime === 'old' ? 'Old Tax Regime' : 'New Tax Regime'}`, 20, yPos + 3);
    yPos += 10;
    doc.text(`Savings: Rs. ${comparison.savings.toLocaleString('en-IN')}`, 20, yPos);

    yPos += 15;
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(14);
    doc.text('AI Recommendations', 15, yPos);

    yPos += 10;
    doc.setFontSize(10);
    comparison.recommendations.slice(0, 3).forEach((rec, index) => {
      if (yPos > 250) {
        doc.addPage();
        yPos = 20;
      }
      doc.setTextColor(147, 51, 234);
      doc.text(`${index + 1}. ${rec.title}`, 20, yPos);
      yPos += 6;
      doc.setTextColor(0, 0, 0);
      const lines = doc.splitTextToSize(rec.description, pageWidth - 40);
      doc.text(lines, 25, yPos);
      yPos += lines.length * 5;
      doc.setTextColor(16, 185, 129);
      doc.text(`Potential Savings: Rs. ${rec.potentialSavings.toLocaleString('en-IN')}`, 25, yPos);
      yPos += 10;
    });

    yPos += 10;
    if (yPos > 250) {
      doc.addPage();
      yPos = 20;
    }
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text('This report is generated by TaxGenie AI and is for informational purposes only.', pageWidth / 2, yPos, { align: 'center' });
    yPos += 5;
    doc.text('Please consult with a qualified tax professional before making financial decisions.', pageWidth / 2, yPos, { align: 'center' });

    doc.save('TaxGenie-Tax-Summary.pdf');
  };

  return (
    <button
      onClick={generatePDF}
      className="flex items-center gap-2 bg-gradient-to-r from-green-600 to-emerald-600 text-white px-6 py-3 rounded-xl font-semibold hover:from-green-700 hover:to-emerald-700 transition-all shadow-lg hover:shadow-xl transform hover:-translate-y-0.5"
    >
      <Download size={20} />
      Export as PDF
    </button>
  );
}
